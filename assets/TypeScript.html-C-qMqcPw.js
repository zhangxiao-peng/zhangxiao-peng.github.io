import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as l}from"./app-DXIxUTpZ.js";const h={};function e(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>TypeScript</span></a></h1><h5 id="安装编译" tabindex="-1"><a class="header-anchor" href="#安装编译"><span>安装编译</span></a></h5><p>安装 npm install -g typescript</p><p>编译命令 tsc 文件名.ts</p><h5 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">原始数据类型：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">布尔值 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    数值 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    字符串 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     所有类型的子类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">symbol</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    BigInt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 空值 该类型的变量无用只能赋值为 </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表示允许赋值任意类型，任何操作都返回任意类型,定义时未指定类型的变量均为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">any</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">枚举 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">enum</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  枚举从0开始进行映射，也可手动赋值枚举项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  需要注意手动赋值与自动递增的重复了</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  手动值可以不是数字 但需要添加类型断言</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  枚举项类型包括常数项和计算所得项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    常数项  不具有初始化函数并且之前的枚举成员是常数 枚举成员使用常数枚举表达式初始化</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  常数枚举  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> enum</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  外部枚举 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> enum</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="类型推论" tabindex="-1"><a class="header-anchor" href="#类型推论"><span>类型推论</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>根据定义时赋值推测变量的类型，未赋值则为any</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型"><span>联合类型</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>取值为多种类型 类型1|类型2  使用‘|’分割，不确定类型时，只可以访问共有属性和方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名"><span>类型别名</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>用来给类型起名字 常用于连个类型 type 别名=类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="字符串字面量类型" tabindex="-1"><a class="header-anchor" href="#字符串字面量类型"><span>字符串字面量类型</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>约束取值只能是某几个字符串中的一个</span></span>
<span class="line"><span>type 名字=&#39;字符1&#39;|&#39;字符2&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="对象类型-接口" tabindex="-1"><a class="header-anchor" href="#对象类型-接口"><span>对象类型-接口</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 接口名(大写开头){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;属性名&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;类型&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  readonly</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;属性名&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;类型&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> //只读属性</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;属性名&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;类型&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> //可选属性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;属性名&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">any</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> //任意属性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}   </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//定义对象类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  变量赋值必须与接口定义保持一致 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  定义任意属性  确认属性和可选属性都必须是任意属性的类型(任意属性的属性名为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">类型时)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">类  类定义事物属性方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">对象 类的实例 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">面向对象特征</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  封装 隐藏数据操作细节 只暴露接口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  继承 子继承父类所有特性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  多态  继承产生的多个类同相同方法有不同处理</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">getter</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">setter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  修改或读取属性值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">修饰符 限定成员或类型的性质</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">抽象类 供其他类继承的基类 抽象类不允许被实例 抽象方法必须在子类中实现</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">接口 不同类之间共有的属性方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">类的继承 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">extends</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 子类使用</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">可以调用父类的构造函数和方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">静态方法（</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">static</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 修饰）可以直接通过类调用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pubilc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 共有  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">private</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 私有 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">protected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 受保护的(在子类中允许被访问)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">readonly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 只读属性</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">abstract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 定义抽象类 不允许被实例化</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="数组类型-元组" tabindex="-1"><a class="header-anchor" href="#数组类型-元组"><span>数组类型/元组</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">类型[] 只允许数组里的项为指定类型，调用数组的方法参数也需要为指定的类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Array</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 数组泛型表示数组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">类数组不是数组类型，需要用接口来描述，有自己的接口定义(内置对象)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  数组名:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//数组允许出现任意类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">元组 合并不同类型的对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">直接对元组类型的变量进行初始化或者赋值的时候，需要提供所有元组类型中指定的项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">添加越界元素类型会被限制为元组中每个类型的联合类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型"><span>函数类型</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">函数声明  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 函数名(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;参数名&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;类型&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;可选参数&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;类型&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;参数名&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;类型&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;默认值&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">rest</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[])</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                :&#39;返回值类型&#39;{}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//可选参数必须在必需参数后边，添加默认值(会被识别为可选参数)不受该限制,...rest 剩余参数只能最后一个</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">函数表达式 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 函数名(&#39;参数名&#39;:&#39;类型&#39;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;返回值类型&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">函数声明</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// =&gt;用于函数的定义 左边输入右边表示输出 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">函数表达式可以使用接口定义 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  函数名|接口</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">函数声明 </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//保证对函数名赋值时保证参数个数、类型、返回值类型不变</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">函数重载 函数接收不同参数做出不同处理 对函数重载定义,优先从前面的定义开始匹配,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         如果有包含关系优先把精确的定义在前边</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言"><span>类型断言</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">值 </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 类型   </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;类型&gt;值   </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// tsx语法必须使用as写法，&lt;&gt;也可能表示一个泛型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">用途：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    将一个联合类型断言为其中一个类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    将一个父类断言为更加具体的子类</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    将一个类型断言为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">any</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    将</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">断言为一个具体类型  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//双重断言 先断言为any类型再断言为其他类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    类型断言的兼容  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">被断言为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 那么只需要</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">兼容</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 或者</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">兼容</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  类型断言不是类型转换</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="声明文件" tabindex="-1"><a class="header-anchor" href="#声明文件"><span>声明文件</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">声明语句：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 声明全局变量  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">declare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> function  声明全局方法  declare class 声明全局类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> enum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 声明全局枚举类 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 声明含有子属性的全局对象  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">interface</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 声明全局类型 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 导出变量  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 导出含子属性对象 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> es6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">默认导出 </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">export</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> commonjs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">导出模块 </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> UMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">库声明全局变量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 扩展全局变量 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> moudle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 扩展模块  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">///&lt;reference /&gt; 三斜线指令 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">声明语句放在单独文件 即声明文件  .</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">为后缀</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">第三方声明文件 建议使用@</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">types</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 统一管理</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">应用场景</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  全局变量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    存放</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">下边 未生效 检查 </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">tsconfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 中的 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">、</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 和 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">exclude</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 配置 确保包含</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">XXX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ds</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    一般为常量，只能定义类型，不能定义具体实现</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    declare</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 内部直接使用 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 等来声明 ，如果对象拥有深层层级 则需要用嵌套的 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">namespace</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 最好放在</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">下，防止命名冲突</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  npm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">包</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    创建</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">types</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">目录书写声明文件，需要配置下 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">tsconfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 中的 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">paths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 和 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">baseUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 字段。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    禁止定义具体实现</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    混用 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">declare</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 先用 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">declare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 声明再用 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 导出</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    export</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> default</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">、</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 和 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(可以直接默认导出,其他的需要先定义) 导出语句放在声明文件最前面</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    整体导出 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">moudle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=&#39;&#39; 单个导出 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">xx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">xx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    导入 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> xx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">xx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39;) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> xx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">xx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39;) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">xx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;xx&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#E45649;--shiki-dark:#D19A66;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> xx</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;xx&#39;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">  UMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    可以通过</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">标签引入 又可以通过</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">导入的库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  直接扩展全局变量 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    第三方库扩展了一个全局变量，可是此全局变量的类型却没有相应的更新过来，需要扩展全局变量类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    通过声明合并 为其添加属性或方法  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 给已有命名空间添加类型声明</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  在</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">npm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 包或</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">UMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 库中扩展全局变量   </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  模块插件 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 用来扩展原有模块的类型  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    需要先引用原有模块 再使用 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 扩展</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    也可用于在一个文件中一次性声明多个</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  声明文件中的依赖  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 导入另一个声明文件   或者 三斜线命令(书写或需要依赖全局变量的声明文件)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    三斜线必须要在文件最顶端  前边只允许有注释 &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">reference</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  types</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    文件过大可以拆分声明文件，在入口文件引入   </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">types</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">声明对库的依赖 </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 声明对文件的依赖</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  自动生成 编译时添加-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  或</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tsconfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 添加</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">declaration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 为</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    declarationDir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 设置生成 .</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 文件的目录</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    declarationMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 对每个 .</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 文件，都生成对应的 .</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sourcemap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">）文件</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    emitDeclarationOnly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 仅生成 .</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 文件，不生成 .</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">js</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="内置对象" tabindex="-1"><a class="header-anchor" href="#内置对象"><span>内置对象</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">根据标准在全局作用域上存在的对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">使用</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">TypeScript</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">写</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">nodejs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">需要 引入第三方声明文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// npm install @types/node --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="类型体操" tabindex="-1"><a class="header-anchor" href="#类型体操"><span>类型体操</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">TypeScript</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 类型的模式匹配是通过类型 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">extends</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 一个模式类型，把需要提取的部分放到通过</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">infer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 声明的局部变量里，后面可以从这个局部变量拿到类型做各种后续处理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,30)]))}const d=i(h,[["render",e],["__file","TypeScript.html.vue"]]),r=JSON.parse('{"path":"/note/study/TypeScript.html","title":"TypeScript","lang":"zh-CN","frontmatter":{"date":"2024-09-27T00:00:00.000Z","category":["学习"],"tag":["TypeScript"],"star":true,"description":"TypeScript 安装编译 安装 npm install -g typescript 编译命令 tsc 文件名.ts 数据类型 类型推论 联合类型 类型别名 字符串字面量类型 对象类型-接口 类 数组类型/元组 函数类型 类型断言 声明文件 内置对象 类型体操","head":[["meta",{"property":"og:url","content":"https://zyp1201.top/note/study/TypeScript.html"}],["meta",{"property":"og:site_name","content":"ZhangYp Blog"}],["meta",{"property":"og:title","content":"TypeScript"}],["meta",{"property":"og:description","content":"TypeScript 安装编译 安装 npm install -g typescript 编译命令 tsc 文件名.ts 数据类型 类型推论 联合类型 类型别名 字符串字面量类型 对象类型-接口 类 数组类型/元组 函数类型 类型断言 声明文件 内置对象 类型体操"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-27T09:11:02.000Z"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:published_time","content":"2024-09-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-27T09:11:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-27T09:11:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ZhangYp\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1727428262000,"updatedTime":1727428262000,"contributors":[{"name":"zhangYunPeng","email":"2250079463@qq.com","commits":1}]},"readingTime":{"minutes":6.78,"words":2035},"filePathRelative":"note/study/TypeScript.md","localizedDate":"2024年9月27日","excerpt":"\\n<h5>安装编译</h5>\\n<p>安装 npm install -g typescript</p>\\n<p>编译命令 tsc 文件名.ts</p>\\n<h5>数据类型</h5>\\n<div class=\\"language-typescript line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"typescript\\" data-title=\\"typescript\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">原始数据类型：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">布尔值 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">boolean</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    数值 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">number</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    字符串 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">string</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">null</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">    undefined</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">     所有类型的子类型</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">symbol</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">    BigInt</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> 空值 该类型的变量无用只能赋值为 </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">null</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> undefined</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">any</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> 表示允许赋值任意类型，任何操作都返回任意类型,定义时未指定类型的变量均为</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">any</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">枚举 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">enum</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  枚举从0开始进行映射，也可手动赋值枚举项</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  需要注意手动赋值与自动递增的重复了</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  手动值可以不是数字 但需要添加类型断言</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  枚举项类型包括常数项和计算所得项</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    常数项  不具有初始化函数并且之前的枚举成员是常数 枚举成员使用常数枚举表达式初始化</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  常数枚举  </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">const</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> enum</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  外部枚举 </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">declare</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> enum</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,r as data};
